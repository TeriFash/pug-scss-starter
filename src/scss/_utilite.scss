// Media mixin
$units: 1px !default;

@mixin screen($res-first, $res-last: $res-first)
{
  @if $res-first == $res-last
  {
    @media screen and ( max-width: if(unitless($res-first), $res-first*$units, $res-first) )
    {
      @content;
    }
  }
  @else if $res-first < $res-last
  {
    @media screen and ( min-width: if(unitless($res-first), $res-first*$units, $res-first) ) and ( max-width: if(unitless($res-last), $res-last*$units, $res-last) )
    {
      @content;
    }
  }
}

@mixin min-screen($res)
{
  @media screen and ( min-width: if(unitless($res), $res*$units, $res) )
  {
    @content;
  }
}

// Responsive Fonts

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function calcFluidFontSize($f-min, $f-max, $w-min, $w-max, $units: px) {
  $f-min: strip-unit($f-min);
  $f-max: strip-unit($f-max);
  $w-min: strip-unit($w-min);
  $w-max: strip-unit($w-max);
  
	$k: ($f-max - $f-min)/($w-max - $w-min);
	$b: $f-min - $k * $w-min;

	$b: $b + $units;

	@return calc( #{$k} * 100vw + #{$b} );
}

@mixin fluidFontSize($f-min, $f-max, $w-min, $w-max, $fallback: false) {
  
  font-size: $f-min;
  
  @media (min-width: $w-min) {
    @if ($fallback) {
      font-size: $fallback;
    }
    font-size: calcFluidFontSize($f-min, $f-max, $w-min, $w-max, px);  
  }
  @media (min-width: $w-max) {
    font-size: $f-max;
  }
}

// Underline

.underbar a,
a.underbar {
  position: relative;
  text-decoration: none;
  display: inline;
  color: inherit;

  transition: all .3s ease;
}

.underbar a::after,
a.underbar::after {
  position: absolute;
  background: rgba($accent, 0.7);
  content: '';
  bottom: -4px;
  left: 0;
  width: 0;
  height: 2px;
  transition: all .3s ease;
}

.underbar .uk-active a::after {
  width: 100%;
}

.underbar a:hover::after,
a.underbar:hover::after {
  width: 100%;
}

// Animation

.my-transition {
  transition: all .3s ease-in-out;
}